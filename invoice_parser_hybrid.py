#!/usr/bin/env python3
"""
–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏ —Ç–æ–≤–∞—Ä–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç PyMuPDF –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –∏ OpenAI –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
"""

import json
import sys
import os
from pathlib import Path
import xlwt
from dotenv import load_dotenv
from openai import OpenAI
import fitz  # PyMuPDF

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def extract_text_from_pdf(pdf_path: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF –∏—Å–ø–æ–ª—å–∑—É—è PyMuPDF —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    """
    print(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF...")
    doc = fitz.open(pdf_path)

    all_text = []

    for page_num in range(len(doc)):
        page = doc[page_num]
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}/{len(doc)}...")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–ª–æ–∫–æ–≤
        # dict mode —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∞—Ö, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
        text_dict = page.get_text("dict")

        page_lines = []
        for block in text_dict["blocks"]:
            if block["type"] == 0:  # —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫
                for line in block["lines"]:
                    line_text = ""
                    for span in line["spans"]:
                        line_text += span["text"]
                    if line_text.strip():
                        page_lines.append(line_text.strip())

        all_text.append('\n'.join(page_lines))

    doc.close()

    full_text = '\n\n=== –ù–û–í–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ===\n\n'.join(all_text)
    print(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞")

    return full_text


def parse_with_openai(text: str, prompt_file: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è OpenAI
    """
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        raise ValueError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

    client = OpenAI(api_key=api_key)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
    with open(prompt_file, 'r', encoding='utf-8') as f:
        system_prompt = f.read()

    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenAI –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-4o –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"–í–æ—Ç —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n{text}"}
        ],
        temperature=0,
        max_tokens=16000
    )

    response_text = response.choices[0].message.content

    print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")

    # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
    try:
        json_start = response_text.find('{')
        json_end = response_text.rfind('}') + 1
        json_str = response_text[json_start:json_end]
        data = json.loads(json_str)
        return data
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}", file=sys.stderr)
        print(f"–û—Ç–≤–µ—Ç: {response_text[:500]}...", file=sys.stderr)
        return {"header": {}, "items": [], "error": str(e)}


def parse_invoice_complete(pdf_path: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç PDF –∏–Ω–≤–æ–π—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    """
    # –®–∞–≥ 1: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
    text = extract_text_from_pdf(pdf_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    debug_file = f"{pdf_path}.extracted_text.txt"
    with open(debug_file, 'w', encoding='utf-8') as f:
        f.write(text)
    print(f"–û—Ç–ª–∞–¥–∫–∞: —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {debug_file}")

    # –®–∞–≥ 2: –ü–∞—Ä—Å–∏–º —Å –ø–æ–º–æ—â—å—é OpenAI
    result = parse_with_openai(text, 'task-items-advanced.txt')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    debug_json = f"{pdf_path}.result.json"
    with open(debug_json, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    print(f"–û—Ç–ª–∞–¥–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {debug_json}")

    return result


def export_to_excel_advanced(data: dict, excel_file: str, pdf_filename: str):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Excel —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if Path(excel_file).exists():
        import xlrd
        from xlutils.copy import copy as xl_copy

        try:
            rb = xlrd.open_workbook(excel_file, formatting_info=True)
            wb = xl_copy(rb)
            sheet = wb.get_sheet(0)
            start_row = rb.sheet_by_index(0).nrows
        except:
            wb = xlwt.Workbook(encoding='utf-8')
            sheet = wb.add_sheet('–¢–æ–≤–∞—Ä—ã')
            start_row = 0
    else:
        wb = xlwt.Workbook(encoding='utf-8')
        sheet = wb.add_sheet('–¢–æ–≤–∞—Ä—ã')
        start_row = 0

    # –°—Ç–∏–ª–∏
    header_style = xlwt.easyxf('font: bold 1; align: horiz center')
    normal_style = xlwt.easyxf()

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if start_row == 0:
        headers = [
            '–ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫',
            '–∫–æ–¥ –Ñ–î–†–ü–û–£',
            '—Ç–µ–ª–µ—Ñ–æ–Ω',
            '–∞–¥—Ä–µ—Å–∞',
            '–¥–∞—Ç–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó',
            '–Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó',
            '–£–ö–¢ –ó–ï–î',
            '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
            '–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞, –∞—Ä—Ç–∏–∫–ª—å)',
            '—Ü—ñ–Ω–∞ –∑–∞ —à—Ç –±–µ–∑ –ø–¥–≤',
            '–∫—ñ–ª-—Å—Ç—å —à—Ç—É–∫',
            '—Å—É–º–∞ –±–µ–∑ –ø–¥–≤',
            '—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é –∑ –ü–î–í',
            '—Å—É–º–∞ –∑ –ü–î–í'
        ]
        for col, header in enumerate(headers):
            sheet.write(0, col, header, header_style)
        start_row = 1

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    header = data.get('header', {})
    postachalnyk = header.get('postachalnyk', '')
    kod_edrpu = header.get('kod_edrpu', '')
    telefon = header.get('telefon', '')
    adresa = header.get('adresa', '')
    data_nakladnoi = header.get('data_nakladnoi', '')
    nomer_nakladnoi = header.get('nomer_nakladnoi', '')

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
    items = data.get('items', [])

    for idx, item in enumerate(items):
        row = start_row + idx

        # –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞)
        sheet.write(row, 0, postachalnyk, normal_style)
        sheet.write(row, 1, kod_edrpu, normal_style)
        sheet.write(row, 2, telefon, normal_style)
        sheet.write(row, 3, adresa, normal_style)
        sheet.write(row, 4, data_nakladnoi, normal_style)
        sheet.write(row, 5, nomer_nakladnoi, normal_style)

        # –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        sheet.write(row, 6, item.get('ukt_zed', ''), normal_style)
        sheet.write(row, 7, item.get('naimenovanie_tovara', ''), normal_style)
        sheet.write(row, 8, item.get('oboznachennya_tovara', ''), normal_style)
        sheet.write(row, 9, item.get('tsina_za_sht_bez_pdv', ''), normal_style)
        sheet.write(row, 10, item.get('kilkist_shtuk', ''), normal_style)
        sheet.write(row, 11, item.get('suma_bez_pdv', ''), normal_style)
        sheet.write(row, 12, item.get('tsina_za_odynytsyu_z_pdv', ''), normal_style)
        sheet.write(row, 13, item.get('suma_z_pdv', ''), normal_style)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    wb.save(excel_file)
    print(f"‚úì –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ {excel_file}")


def process_invoice(pdf_path: str, excel_file: str = "—Ç–∞–±–ª–∏—Ü—è –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö.xls"):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∏–Ω–≤–æ–π—Å: –ø–∞—Ä—Å–∏—Ç –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ Excel
    """
    print(f"\n{'='*60}")
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {pdf_path}")
    print(f"{'='*60}")

    # –ü–∞—Ä—Å–∏–º –∏–Ω–≤–æ–π—Å
    result = parse_invoice_complete(pdf_path)

    if 'error' in result:
        print(f"‚úó –û—à–∏–±–∫–∞: {result['error']}")
        return result

    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    header = result.get('header', {})
    items_count = len(result.get('items', []))

    print(f"\nüìã –†–µ–∫–≤–∏–∑–∏—Ç—ã:")
    print(f"  –ü–æ—Å—Ç–∞–≤—â–∏–∫: {header.get('postachalnyk', 'N/A')}")
    print(f"  –Ñ–î–†–ü–û–£: {header.get('kod_edrpu', 'N/A')}")
    print(f"  –î–∞—Ç–∞: {header.get('data_nakladnoi', 'N/A')}")
    print(f"  –ù–æ–º–µ—Ä: {header.get('nomer_nakladnoi', 'N/A')}")
    print(f"\nüì¶ –¢–æ–≤–∞—Ä–æ–≤: {items_count}")

    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel
    pdf_filename = Path(pdf_path).name
    export_to_excel_advanced(result, excel_file, pdf_filename)

    return result


def process_multiple_invoices(pdf_paths: list, excel_file: str = "—Ç–∞–±–ª–∏—Ü—è –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö.xls"):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–≤–æ–π—Å–æ–≤
    """
    total_items = 0
    success_count = 0
    failed_count = 0

    for pdf_path in pdf_paths:
        try:
            result = process_invoice(pdf_path, excel_file)
            if 'error' not in result:
                total_items += len(result.get('items', []))
                success_count += 1
            else:
                failed_count += 1
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {pdf_path}: {e}\n")
            failed_count += 1

    print(f"\n{'='*60}")
    print(f"üìä –ò–¢–û–ì–ò")
    print(f"{'='*60}")
    print(f"‚úì –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count} —Ñ–∞–π–ª–æ–≤")
    print(f"‚úó –û—à–∏–±–æ–∫: {failed_count}")
    print(f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}")
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {excel_file}")
    print(f"{'='*60}\n")


def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python3 invoice_parser_hybrid.py <–ø—É—Ç—å_–∫_pdf> [output.xls]")
        print("  python3 invoice_parser_hybrid.py <–ø—É—Ç—å1.pdf> <–ø—É—Ç—å2.pdf> ... [output.xls]")
        print("  python3 invoice_parser_hybrid.py invoices/*.pdf")
        sys.exit(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª Excel
    excel_file = "—Ç–∞–±–ª–∏—Ü—è –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö.xls"
    pdf_paths = []

    for arg in sys.argv[1:]:
        if arg.endswith('.xls'):
            excel_file = arg
        else:
            pdf_paths.append(arg)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    valid_paths = []
    for pdf_path in pdf_paths:
        if Path(pdf_path).exists():
            valid_paths.append(pdf_path)
        else:
            print(f"‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")

    if not valid_paths:
        print("‚úó –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞")
        sys.exit(1)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    if len(valid_paths) == 1:
        process_invoice(valid_paths[0], excel_file)
    else:
        process_multiple_invoices(valid_paths, excel_file)


if __name__ == "__main__":
    main()
